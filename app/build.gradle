apply plugin: 'com.android.application'

def computeVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--count', 'HEAD'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return -1;
    }
}

ext.computeVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--long'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

def renameApk(variant, defaultConfig) {
    variant.outputs.each { output ->
        def buildType = ""
        def file = output.packageApplication.outputFile
        if (file.name.contains("release")) {
            buildType = "release"
        } else {
            buildType = "debug"
        }
        def fileName = ""
        if (buildType == "debug") {
            fileName = defaultConfig.applicationId + "-"
            fileName += computeVersionName() + "-"
            fileName += buildType + ".apk"
        }
        else {
            fileName = defaultConfig.applicationId + "-"
            fileName += defaultConfig.versionName + "-"
            fileName += buildType + ".apk"
        }
        output.packageApplication.outputFile = new File(file.parent, fileName)
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")

def keystoreProperties = new Properties()

if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "it.faerb.crond"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 9
        versionName "v1.2.5"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [applicationLabel: "@string/app_name_debug"]
            applicationVariants.all { variant ->
                renameApk(variant, defaultConfig)
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [applicationLabel: "@string/app_name"]
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                renameApk(variant, defaultConfig)
            }
        }
    }
    applicationVariants.all { variant ->
        def flavor = variant.mergedFlavor
        if (variant.buildType.isDebuggable()) {
        flavor.versionName = computeVersionName()
        flavor.versionCode = computeVersionCode()
        }
        else {
            flavor.versionName = defaultConfig.versionName
            flavor.versionCode = defaultConfig.versionCode
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.cronutils:cron-utils:4.1.3'
    compile 'eu.chainfire:libsuperuser:1.0.0.201704021214'
}
